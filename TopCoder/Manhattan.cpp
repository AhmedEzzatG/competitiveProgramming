#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>
using namespace std;
#define endl "\n"
#define ll long long
#define oo 0x3f3f3f3fLL
#define sz(s) (int)(s.size())
#define RT(s) return cout<<s,0
#define INF 0x3f3f3f3f3f3f3f3fLL
#define all(v) v.begin(),v.end()
#define watch(x) cout<<(#x)<<" = "<<x<<endl
const int dr[] { -1, -1, 0, 1, 1, 1, 0, -1 };
const int dc[] { 0, 1, 1, 1, 0, -1, -1, -1 };

class Manhattan {
public:
	vector<int> furthestPair(int n, int a, int b, int m) {
		vector<vector<int>> v;
		set<pair<int, int>> st;
		int prvy = 0;
		for (int i = 0; i < n; i++) {
			int x = (i == 0 ? 0 : (1LL * a * prvy + b) % m);
			int y = (1LL * a * x + b) % m;
			if (st.find( { x, y }) == st.end()) {
				v.push_back( { x, y, i });
				st.insert( { x, y });
			}
			prvy = y;
		}
		vector<int> ans = { 0, 1 };
		if (v.size() == 1)
			return ans;
		pair<int, int> maxSum[2][2];
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 2; j++)
				maxSum[i][j].first = INT_MIN;
		for (auto &it : v) {
			maxSum[0][0] = max(maxSum[0][0], make_pair(it[0] + it[1], -it[2]));
			maxSum[0][1] = max(maxSum[0][1], make_pair(it[0] - it[1], -it[2]));
			maxSum[1][0] = max(maxSum[1][0], make_pair(-it[0] + it[1], -it[2]));
			maxSum[1][1] = max(maxSum[1][1], make_pair(-it[0] - it[1], -it[2]));
		}
		int mx = 0;
		for (int itr = 0; itr < 2; itr++) {
			for (int itr2 = 0; itr2 < 2; itr2++) {
				int d = maxSum[itr][itr2].first + maxSum[!itr][!itr2].first;

				vector<int> tmp = { -maxSum[itr][itr2].second,
						-maxSum[!itr][!itr2].second };
				if (tmp[0] > tmp[1])
					swap(tmp[0], tmp[1]);
				if (d > mx) {
					mx = d;
					ans = tmp;
				} else if (d == mx)
					ans = min(ans, tmp);
			}
		}
		return ans;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3,
		bool hasAnswer, vector<int> p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << ","
			<< p3;
	cout << "]" << endl;
	Manhattan *obj;
	vector<int> answer;
	obj = new Manhattan();
	clock_t startTime = clock();
	answer = obj->furthestPair(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC
			<< " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p4.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p4[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p4.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p4[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	vector<int> p4;

	{
		// ----- test 0 -----
		p0 = 10;
		p1 = 7;
		p2 = 13;
		p3 = 23;
		int t4[] = { 2, 6 };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 10;
		p1 = 17;
		p2 = 17;
		p3 = 17;
		int t4[] = { 0, 1 };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 100;
		p1 = 912;
		p2 = 1023;
		p3 = 103871;
		int t4[] = { 0, 54 };
		p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4)
				&& all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
