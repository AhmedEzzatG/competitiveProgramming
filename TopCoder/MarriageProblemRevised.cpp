#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>
using namespace std;
#define endl "\n"
#define ll long long
#define oo 0x3f3f3f3fLL
#define INF 0x3f3f3f3f3f3f3f3f
#define sz(s) (int)(s.size())
#define RT(s) return cout<<s,0
#define all(v) v.begin(),v.end()
#define watch(x) cout<<(#x)<<" = "<<x<<endl
const int dr[]{ -1, -1, 0, 1, 1, 1, 0, -1 };
const int dc[]{ 0, 1, 1, 1, 0, -1, -1, -1 };

class MarriageProblemRevised {
public:
	vector<vector<short>> mem;
	vector<int> mLike, wLike;
	int men, women;
	short solve(int manMask = 0, int womenMask = 0) {
		if (manMask + 1 == (1 << men) && womenMask + 1 == (1 << women))return 0;
		short& rt = mem[manMask][womenMask];
		if (~rt)return rt;
		rt = 1000;
		for (int i = 0; i < men; i++)
			rt = min((int)rt, 1 + solve(manMask | (1 << i), womenMask | mLike[i]));

		for (int i = 0; i < women; i++)
			rt = min((int)rt, 1 + solve(manMask | wLike[i], womenMask | (1 << i)));
		return rt;
	}

	int neededMarriages(vector<string> preferences) {
		men = sz(preferences), women = sz(preferences[0]);
		mLike = vector<int>(men);
		wLike = vector<int>(women);

		for (int i = 0; i < men; i++)	for (int j = 0; j < women; j++)
			if (preferences[i][j] == '1')
				mLike[i] |= (1 << j), wLike[j] |= (1 << i);

		for (int i = 0; i < men; i++)if (mLike[i] == 0)return -1;
		for (int i = 0; i < women; i++)if (wLike[i] == 0)return -1;

		mem = vector<vector<short>>(1 << men, vector<short>(1 << women, -1));
		int rt = solve();
		if (rt >= oo)rt = -1;
		return rt;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MarriageProblemRevised *obj;
	int answer;
	obj = new MarriageProblemRevised();
	clock_t startTime = clock();
	answer = obj->neededMarriages(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"100","010","001"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"00","00"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"0001","0001","0001","1111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"11101011","00011110","11100100","01010000","01000010","10100011","01110110","10111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
