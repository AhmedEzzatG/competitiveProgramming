#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>
using namespace std;
#define endl "\n"
#define ll long long
#define oo 0x3f3f3f3fLL
#define sz(s) (int)(s.size())
#define RT(s) return cout<<s,0
#define INF 0x3f3f3f3f3f3f3f3fLL
#define all(v) v.begin(),v.end()
#define watch(x) cout<<(#x)<<" = "<<x<<endl
const int dr[] { -1, -1, 0, 1, 1, 1, 0, -1 };
const int dc[] { 0, 1, 1, 1, 0, -1, -1, -1 };
#if __cplusplus >= 201402L
template<typename T>
vector<T> create(size_t n) {
	return vector<T>(n);
}
template<typename T, typename ... Args>
auto create(size_t n, Args ... args) {
	return vector<decltype(create<T>(args...))>(n, create<T>(args...));
}
#endif

class MessageMess {
public:
	vector<string> dictionary;
	string word;
	vector<int> mem;
	int canSplit(int start) {
		if (start == word.size())
			return 1;
		int &rt = mem[start];
		if (~rt)
			return rt;
		rt = 0;
		string subWord;
		for (int end = start; end < word.size() && rt < 2; end++) {
			subWord += word[end];
			if (binary_search(all(dictionary), subWord))
				rt += canSplit(end + 1);
		}
		rt = min(rt, 2);
		return rt;
	}
	string breakWord(int start) {
		if (start == word.size())
			return "";
		string subWord;
		for (int end = start; end < word.size(); end++) {
			subWord += word[end];
			if (binary_search(all(dictionary), subWord) && canSplit(end + 1)) {
				if (end + 1 == word.size())
					return subWord;
				return subWord + " " + breakWord(end + 1);
			}
		}
	}
	string restore(vector<string> dictionary, string message) {
		this->dictionary = dictionary;
		sort(all(this->dictionary));
		this->word = message;
		mem = vector<int>(word.size(), -1);
		int rt = canSplit(0);
		if (rt == 0)
			return "IMPOSSIBLE!";
		else if (rt == 2)
			return "AMBIGUOUS!";
		return breakWord(0);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	MessageMess *obj;
	string answer;
	obj = new MessageMess();
	clock_t startTime = clock();
	answer = obj->restore(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	string p2;
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
